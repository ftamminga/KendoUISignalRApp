@using KendoUISignalRApp.Models
@{
    ViewBag.Title = "Home Page";
}

<script src="@Url.Content("~/Scripts/jquery.signalR-2.2.1.min.js")"></script>
<script src="@Url.Content("~/signalr/hubs")"></script>

<script language="javascript">
    var hub = $.connection.productHub;
    var hubStart = $.connection.hub.start();

    hub.client.showMessage = function (message) {
        console.log(message);
    }
</script>

@(Html.Kendo().Notification()
      .Name("notification")
      .Width("100%")
      .Position(position => position.Top(0).Left(0))
)

@(Html.Kendo().Grid<ProductViewModel>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.ProductName);
        columns.Bound(p => p.UnitPrice).Width(140);
        columns.Bound(p => p.UnitsInStock).Width(80);
        columns.Bound(p => p.Discontinued).Width(80);
        columns.Command(command =>
        {
            command.Destroy();
        }).Width(110);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Navigatable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .Pageable(pageable => pageable.Refresh(true))
    .DataSource(dataSource => dataSource
        .SignalR()
        .AutoSync(true)
        .Events(events => events.Push(@<text>
            function(e) {
            var notification = $("#notification").data("kendoNotification");
            notification.success(e.type);
            }
        </text>))
        //.Sort(sort => sort.Add(s => s.ProductName).Ascending())
        .ServerFiltering(true)
        .ServerPaging(true)
        .ServerSorting(true)
        .PageSize(10)
        .Transport(tr => tr
            .Promise("hubStart")
            .Hub("hub")
            .Client(c => c
                .Read("read")
                .Create("create")
                .Update("update")
                .Destroy("destroy"))
            .Server(s => s
                .Read("read")
                .Create("create")
                .Update("update")
                .Destroy("destroy")))
        .Schema(schema => schema
            .Data("Data")
            .Total("Total")
            .Aggregates("Aggregates")
            .Model(model =>
            {
                model.Id(m => m.ProductID);
                model.Field(m => m.ProductID).Editable(false);
                model.Field(m => m.ProductName).Editable(true);
                model.Field(m => m.UnitPrice).Editable(true);
                model.Field(m => m.UnitsInStock).Editable(true);
                model.Field(m => m.Discontinued).Editable(true);
            })
        )
    )
)

<br />
<div class="configuration-horizontal">
    <span class="configHead">Information</span>
    <p>
        This demo demonstrates real-time push-notifications from <a href="http://signalr.net/">SignalR</a>.
    </p>
    <p>
        To see the real-time updates:
    </p>
    <ol>
        <li>Open this page in another browser window by clicking <a href="" target="_new">here</a></li>
        <li>Create, update or destroy grid items.</li>
    </ol>
</div>